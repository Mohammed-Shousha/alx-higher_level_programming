test cases for module lazy_matrix_mul
===============================

import the function
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

test normal case
    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[1, 2], [3, 4]]
    >>> lazy_matrix_mul(m_a, m_b)
    array([[ 7, 10],
           [15, 22]])
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

test different sizes
    >>> m_a = [[1, 2, 3], [4, 5, 6]]
    >>> m_b = [[7, 8], [9, 10], [11, 12]]
    >>> lazy_matrix_mul(m_a, m_b)
    array([[ 58,  64],
           [139, 154]])
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 58  64]
     [139 154]]

test with two matrices
    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[5, 6], [7, 8]]
    >>> lazy_matrix_mul(m_a, m_b)
    array([[19, 22],
           [43, 50]])
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[19 22]
     [43 50]]

test missing one argument
    >>> lazy_matrix_mul([[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

test missing two arguments
    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

test with wrong size
    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[5, 6], [7, 8], [9, 10]]
    >>> lazy_matrix_mul(m_a, m_b)
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)

test with empty list
    >>> lazy_matrix_mul([[]], [[5, 6], [7, 8]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> lazy_matrix_mul([[5, 6], [7, 8]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)


test with not a list
    >>> lazy_matrix_mul("not a list", [[1, 2]])
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul([[1, 2]], "also not a list")
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> lazy_matrix_mul("not a list", "also not a list")
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

test with None
    >>> lazy_matrix_mul(None, None)
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

test with wrong type
    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, "8"]])
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, {"a": 1}]])
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

test each row should be the same size
    >>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]])
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.
